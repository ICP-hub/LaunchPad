type Account = record { owner : principal; subaccount : opt blob };
type CanisterIndexInfo = record {
  token_symbol : text;
  canister_id : text;
  index_canister_id : text;
  token_name : text;
};
type ImageData = record {
  content : opt blob;
  name : text;
  content_type : text;
  ledger_id : principal;
};
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok : record { text; text }; Err : text };
type Result_2 = variant { Ok : SaleDetails; Err : text };
type Result_3 = variant { Ok; Err : text };
type Result_4 = variant { Ok : text; Err : text };
type SaleDetails = record {
  listing_rate : float64;
  twitter : text;
  min_buy : nat64;
  instagram : text;
  description : text;
  youtube_video : text;
  website : text;
  logo_url : text;
  facebook : text;
  end_time_utc : nat64;
  discord : text;
  start_time_utc : nat64;
  max_buy : nat64;
  telegram : text;
  github : text;
  reddit : text;
};
type UserInputParams = record {
  decimals : opt nat8;
  token_symbol : text;
  initial_balances : vec record { Account; nat };
  token_name : text;
};
service : () -> {
  convert_icp_to_cycles : (nat64) -> (Result);
  create_token : (UserInputParams) -> (Result_1);
  get_image_ids : () -> (vec record { nat32; principal }) query;
  get_sale_params : (principal) -> (Result_2) query;
  get_tokens_info : () -> (vec CanisterIndexInfo) query;
  search_by_token_name : (text) -> (opt CanisterIndexInfo) query;
  store_sale_params : (principal, SaleDetails) -> (Result_3);
  upload_image : (text, ImageData) -> (Result_4);
}
