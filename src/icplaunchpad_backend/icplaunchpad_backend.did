type Account = record { owner : principal; subaccount : opt blob };
type BuyTransferParams = record {
  icrc1_ledger_canister_id : principal;
  tokens : nat64;
  buyer_principal : principal;
};
type CanisterIdRecord = record { canister_id : principal };
type CanisterIndexInfo = record {
  token_symbol : text;
  canister_id : text;
  index_canister_id : text;
  token_name : text;
  total_supply : nat;
};
type CoverImageData = record { content : opt blob; ledger_id : principal };
type Icrc28TrustedOriginsResponse = record { trusted_origins : vec text };
type ProfileImageData = record { content : opt blob };
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : nat; Err : text };
type Result_1 = variant { Ok; Err : text };
type Result_2 = variant { Ok : nat64; Err : text };
type Result_3 = variant { Ok : TokenCreationResult; Err : text };
type Result_4 = variant { Ok; Err : record { RejectionCode; text } };
type Result_5 = variant { Ok : nat; Err : text };
type Result_6 = variant { Ok : SaleDetails; Err : text };
type Result_7 = variant {
  Ok : vec record { CanisterIndexInfo; SaleDetails };
  Err : text;
};
type Result_8 = variant { Ok : text; Err : text };
type SaleDetails = record {
  creator : principal;
  tokens_for_fairlaunch : nat64;
  softcap : nat64;
  max_contribution : nat64;
  min_contribution : nat64;
  description : text;
  fee_for_approval : nat64;
  liquidity_percentage : nat8;
  website : text;
  tokens_for_approval : nat64;
  tokens_for_liquidity_after_fee : nat64;
  hardcap : nat64;
  end_time_utc : nat64;
  project_video : text;
  start_time_utc : nat64;
  processed : bool;
  social_links : vec text;
};
type SaleDetailsUpdate = record {
  description : opt text;
  website : opt text;
  end_time_utc : opt nat64;
  project_video : opt text;
  start_time_utc : opt nat64;
  social_links : opt vec text;
};
type SaleDetailsWithID = record {
  sale_details : SaleDetails;
  ledger_canister_id : text;
};
type SaleInputParams = record {
  creator : principal;
  tokens_for_fairlaunch : nat64;
  softcap : nat64;
  max_contribution : nat64;
  min_contribution : nat64;
  description : text;
  liquidity_percentage : nat8;
  website : text;
  hardcap : nat64;
  end_time_utc : nat64;
  project_video : text;
  start_time_utc : nat64;
  social_links : vec text;
};
type TokenCreationResult = record {
  index_canister_id : principal;
  ledger_canister_id : principal;
};
type UserAccount = record {
  tag : vec text;
  username : text;
  profile_picture : opt blob;
  name : text;
  links : vec text;
};
type UserInputParams = record {
  decimals : opt nat8;
  token_symbol : text;
  initial_balances : vec record { Account; nat };
  token_name : text;
};
service : () -> {
  buy_tokens : (BuyTransferParams) -> (Result);
  create_account : (UserAccount) -> (Result_1);
  create_sale : (principal, SaleInputParams) -> (Result_2);
  create_token : (UserInputParams) -> (Result_3);
  deposit_cycles_to_canister : (CanisterIdRecord, nat) -> (Result_4);
  fetch_canister_balance : (principal) -> (Result_5);
  get_active_sales : () -> (vec SaleDetailsWithID) query;
  get_all_sales : () -> (vec record { SaleDetailsWithID; text }) query;
  get_cover_image_id : (principal) -> (opt nat32) query;
  get_funds_raised : (principal) -> (Result_2) query;
  get_profile_image_id : () -> (opt nat32) query;
  get_sale_params : (principal) -> (Result_6) query;
  get_successful_sales : () -> (vec record { SaleDetailsWithID; nat }) query;
  get_token_image_id : (principal) -> (opt nat32) query;
  get_token_image_ids : () -> (vec record { nat32; principal }) query;
  get_tokens_info : () -> (vec CanisterIndexInfo) query;
  get_upcoming_sales : () -> (vec record { SaleDetailsWithID; nat }) query;
  get_user_account : (principal) -> (opt UserAccount) query;
  get_user_by_username : (text) -> (opt UserAccount) query;
  get_user_sale_params : () -> (Result_7) query;
  get_user_tokens_info : () -> (vec CanisterIndexInfo) query;
  icrc28_trusted_origins : () -> (Icrc28TrustedOriginsResponse);
  icrc_get_balance : (principal) -> (Result_5);
  insert_funds_raised : (principal, nat64) -> (Result_1);
  is_account_created : () -> (text) query;
  obtain_cycles_for_canister : (nat, principal) -> (Result_5);
  search_by_token_name_or_symbol : (text) -> (opt CanisterIndexInfo) query;
  update_sale_params : (principal, SaleDetailsUpdate) -> (Result_1);
  update_user_account : (principal, UserAccount) -> (Result_1);
  upload_cover_image : (text, CoverImageData) -> (Result_8);
  upload_profile_image : (text, ProfileImageData) -> (Result_8);
  upload_token_image : (text, CoverImageData) -> (Result_8);
}
