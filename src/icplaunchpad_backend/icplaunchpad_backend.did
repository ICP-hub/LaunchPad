
type Account = record { owner : principal; subaccount : opt blob };
type ArchiveOptions = record {
  num_blocks_to_archive : nat64;
  max_transactions_per_response : opt nat64;
  trigger_threshold : nat64;
  max_message_size_bytes : opt nat64;
  cycles_for_archive_creation : opt nat64;
  node_max_memory_size_bytes : opt nat64;
  controller_id : principal;
};
type CanisterIndexInfo = record {
  token_symbol : text;
  canister_id : text;
  index_canister_id : text;
  token_name : text;
};
type FeatureFlags = record { icrc2 : bool };

type ImageData = record {
  content : opt blob;
  name : text;
  content_type : text;
};

type Metadata = record { key : text; value : MetadataValue };
type MetadataValue = variant {
  Int : int64;
  Nat : nat;
  Blob : blob;
  Text : text;
};
type Result = variant { Ok : record { text; text }; Err : text };
type Result_1 = variant { Ok : SaleDetails; Err : text };
type Result_2 = variant { Ok; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type SaleDetails = record {
  listing_rate : float64;
  twitter : text;
  min_buy : nat64;
  instagram : text;
  description : text;
  youtube_video : text;
  website : text;
  logo_url : text;
  facebook : text;
  end_time_utc : nat64;
  discord : text;
  start_time_utc : nat64;
  max_buy : nat64;
  telegram : text;
  github : text;
  reddit : text;
};
type TokenParams = record {
  decimals : opt nat8;
  token_symbol : text;
  transfer_fee : nat;
  metadata : vec Metadata;
  minting_account : Account;
  initial_balances : vec record { Account; nat };
  maximum_number_of_accounts : opt nat64;
  accounts_overflow_trim_quantity : opt nat64;
  fee_collector_account : opt Account;
  archive_options : ArchiveOptions;
  max_memo_length : opt nat16;
  token_name : text;
  feature_flags : opt FeatureFlags;
};
service : () -> {
  add_data : (IndexCanisterIdWrapper) -> (Result);
  create_token : (TokenParams) -> (Result);
  get_image_ids : () -> (vec nat32) query;
  get_sale_params : (principal) -> (Result_1) query;
  get_tokens_info : () -> (vec CanisterIndexInfo) query;
  search_by_token_name : (text) -> (opt CanisterIndexInfo) query;
  store_sale_params : (principal, SaleDetails) -> (Result_2);
  upload_image : (text, ImageData) -> (Result_3);
}n
